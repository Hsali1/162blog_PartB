<div class="post" id="post-{{id}}">
    <div class="post-avatar">
        <img src="{{#if avatar_url}}{{avatar_url}}{{else}}avatar/{{username}}{{/if}}" alt="Profile Avatar">
    </div>
    <div class="post-content preserve-newlines">
        <h3 class="post-title">{{title}}</h3>
        <p class="post-content">{{content}}</p>
        <div class="post-info">
            Posted by {{username}} on {{timestamp}}
        </div>
        <div class="post-status-bar">
            <div class="likes-counter" id="likes-count-{{id}}">Likes: {{likes}} ♥</div>
            <button onclick="handleLikeClick(event)" class="like-button {{#if userHasLiked}}liked{{/if}}" data-id="{{id}}">
                <i class="fas fa-thumbs-up"></i> Like
            </button>
        </div>  
        <div class="comments-section">
            <h4>Comments</h4>
            <ul id="comments-list-{{id}}">
                <!-- Comments will be dynamically loaded here -->
            </ul>
            {{#if loggedIn}}
                <textarea id="comment-input-{{id}}" placeholder="Add a comment..."></textarea>
                <button onclick="handleCommentSubmit(event)" class="comment-submit-button like-button" data-id="{{id}}">Submit</button>
            {{/if}}
        </div>     
    </div>
</div>

<script>
    function handleLikeClick(event) {
        const button = event.target.closest('.like-button');
        const postId = button.getAttribute('data-id');

        fetch(`/like/${postId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const likesCountElement = document.querySelector(`#likes-count-${postId}`);
                    if (likesCountElement) {
                        likesCountElement.textContent = `Likes: ${data.likes} ♥`;
                    }
                    button.classList.toggle('liked');
                } else {
                    console.error('Failed to like post:', data.message);
                }
            })
            .catch(error => {
                console.error('Error liking the post:', error);
            });
    }

    function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        const postId = buttonElement.getAttribute('data-id');

        fetch(`/delete/${postId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) {
                    console.log('Post deleted');
                    buttonElement.closest('.post').remove();
                } else {
                    response.json().then(data => {
                        console.error('Failed to delete post:', data.message);
                    });
                }
            })
            .catch(error => console.error('Error deleting the post:', error));
    }

    function handleEditComment(event) {
        const button = event.target;
        const commentId = button.getAttribute('data-comment-id');
        const postId = button.getAttribute('data-post-id');
        const contentElement = document.getElementById(`comment-content-${commentId}`);
        const content = contentElement.innerText.replace(/^[^:]+: /, ''); // Remove the username part
        const username = button.getAttribute('data-username'); // Retrieve the username

        contentElement.innerHTML = `<textarea id="edit-comment-input-${commentId}">${content}</textarea>`;
        button.textContent = 'Save';
        button.classList.add('save-button');
        button.onclick = function() {
            handleSaveComment(commentId, postId, username);
        };

        // Add a cancel button
        const cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.classList.add('cancel-button');
        cancelButton.onclick = function() {
            loadComments(postId); // Reload comments to cancel editing
        };
        contentElement.parentElement.appendChild(cancelButton);
    }

    function handleSaveComment(commentId, postId, username) {
        const input = document.getElementById(`edit-comment-input-${commentId}`);
        const content = input.value;

        fetch(`/posts/${postId}/comments/${commentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const contentElement = document.getElementById(`comment-content-${commentId}`);
                contentElement.innerHTML = `${username}: ${content} <span class="edited">(edited)</span>`;
                const button = document.querySelector(`button[data-comment-id="${commentId}"]`);
                button.textContent = 'Edit';
                button.classList.add('edit-button');
                button.onclick = function(event) {
                    handleEditComment(event);
                };
                // Remove cancel button after saving
                const cancelButton = contentElement.parentElement.querySelector('.cancel-button');
                cancelButton.remove();
            } else {
                console.error('Failed to update comment:', data.message);
            }
        })
        .catch(error => {
            console.error('Error updating comment:', error);
        });
    }

    async function loadComments(postId) {
        try {
            const response = await fetch(`/posts/${postId}/comments`);
            const comments = await response.json();
            const commentsList = document.getElementById(`comments-list-${postId}`);
            commentsList.innerHTML = '';

            comments.forEach(comment => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span id="comment-content-${comment.id}">${comment.username}: ${comment.content} ${comment.edited ? '<span class="edited">(edited)</span>' : ''}</span>
                    ${comment.username === '{{user.username}}' ? `
                        <button onclick="handleEditComment(event)" data-comment-id="${comment.id}" data-post-id="${postId}" data-username="${comment.username}">Edit</button>
                    ` : ''}
                    <button onclick="viewCommentHistory(${comment.id})" class="view-history-button">View History</button>
                    <div id="history-content-${comment.id}" class="history-content" style="display:none;"></div>
                `;
                commentsList.appendChild(li);
            });
        } catch (error) {
            console.error('Error loading comments:', error);
        }
    }

    function handleCommentSubmit(event) {
        const button = event.target;
        const postId = button.getAttribute('data-id');
        const commentInput = document.getElementById(`comment-input-${postId}`);
        const content = commentInput.value;

        fetch(`/posts/${postId}/comments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                commentInput.value = '';
                loadComments(postId);
            } else {
                console.error('Failed to add comment:', data.message);
            }
        })
        .catch(error => {
            console.error('Error adding comment:', error);
        });
    }

    function viewCommentHistory(commentId) {
        console.log(`viewCommentHistory called for commentId: ${commentId}`);  // Debugging line
        const historyContent = document.getElementById(`history-content-${commentId}`);
        
        if (historyContent.style.display === 'block') {
            // Hide history if already visible
            historyContent.style.display = 'none';
            return;
        }

        fetch(`/posts/comments/${commentId}/history`)
            .then(response => response.json())
            .then(data => {
                console.log('History fetch response:', data);  // Debugging line
                if (data.success) {
                    historyContent.innerHTML = '';

                    data.history.reverse().forEach(entry => {  // Reverse to show latest first
                        const div = document.createElement('div');
                        div.innerHTML = `<p>${entry.content} <span class="timestamp">(${entry.timestamp})</span></p>`;
                        historyContent.appendChild(div);
                    });

                    // Show the history content
                    historyContent.style.display = 'block';
                } else {
                    console.error('Failed to retrieve comment history:', data.message);
                }
            })
            .catch(error => {
                console.error('Error retrieving comment history:', error);
            });
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.post').forEach(postElement => {
            const postId = postElement.querySelector('.like-button').getAttribute('data-id');
            loadComments(postId);
        });
    });
</script>

<!-- Include the modal template within the comment section -->
<script id="comment-template" type="text/x-handlebars-template">
    {{#each comments}}
    <li id="comment-{{id}}">
        <span id="comment-content-{{id}}">{{username}}: {{content}} {{edited ? '(edited)' : ''}}</span>
        {{#if userCanEdit}}
            <button onclick="handleEditComment(event)" data-comment-id="{{id}}" data-post-id="{{postId}}" data-username="{{username}}" class="edit-button">Edit</button>
        {{/if}}
        <button onclick="viewCommentHistory({{id}})">View History</button>
        <div id="history-content-{{id}}" class="history-content" style="display:none;"></div>
    </li>
    {{/each}}
</script>
