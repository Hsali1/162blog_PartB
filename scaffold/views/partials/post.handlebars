<div class="post">
    <div class="post-avatar">
        <!-- the user's avatar -->
        <img src="{{#if avatar_url}}{{avatar_url}}{{else}}avatar/{{username}}{{/if}}" alt="Profile Avatar">
    </div>
    <div class="post-content preserve-newlines">
        <!-- the post -->
        <h3>{{title}}</h3>
        <p>{{content}}</p>
        <div class="post-info">
            Posted by {{username}} on {{timestamp}}
        </div>
        <div class="post-status-bar">
            <!-- everything that is shown in the status bar -->
            <!-- Heart = ♥ -->
            <!-- font awesome  trashcan = <i class="fas fa-trash-alt"> </i>-->
            <div class="likes-counter" id="likes-count-{{id}}">Likes: {{likes}} ♥</div>
            {{#if userCanEdit}}
                <button onclick="handleDeleteClick(event)" class="delete-button" data-id="{{id}}">
                    <i class="fas fa-trash-alt"></i>
                </button>
            {{/if}}
            <button onclick="handleLikeClick(event)" class="like-button" data-id="{{id}}">
                <i class="fas fa-thumbs-up"></i> Like
            </button>
        </div>  
        
        <div class="comments-section">
            <h4>Comments</h4>
            <ul id="comments-list-{{id}}">
                <!-- Comments will be dynamically loaded here -->
            </ul>
            {{#if loggedIn}}
                <textarea id="comment-input-{{id}}" placeholder="Add a comment..."></textarea>
                <button onclick="handleCommentSubmit(event)" class="comment-submit-button like-button" data-id="{{id}}">Submit</button>
            {{/if}}
        </div>     
    </div>
</div>

<script>
    function handleLikeClick(event) {
        const button = event.target.closest('.like-button');
        const postId = button.getAttribute('data-id');

        fetch(`/like/${postId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Find and update the likes count element
                    const likesCountElement = document.querySelector(`#likes-count-${postId}`);
                    if (likesCountElement) {
                        likesCountElement.textContent = `Likes: ${data.likes} ♥`;
                    }
                    button.classList.toggle('liked');
                } else {
                    console.error(data.message); // Show error message from server
                }
            })
            .catch(error => {
                console.error('Error liking the post:', error);
            });
    }

    function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        const postId = buttonElement.getAttribute('data-id');

        fetch(`/delete/${postId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) {
                    console.log('Post deleted');
                    buttonElement.closest('.post').remove();  // Remove post from DOM
                } else {
                    response.json().then(data => {
                        console.error('Failed to delete post:', data.message);
                    });
                }
            })
            .catch(error => console.error('Error deleting the post:', error));
    }

    async function loadComments(postId) {
        try {
            const response = await fetch(`/posts/${postId}/comments`);
            const comments = await response.json();
            const commentsList = document.getElementById(`comments-list-${postId}`);
            commentsList.innerHTML = '';

            comments.forEach(comment => {
                const li = document.createElement('li');
                li.textContent = `${comment.username}: ${comment.content}`;
                commentsList.appendChild(li);
            });
        } catch (error) {
            console.error('Error loading comments:', error);
        }
    }

    function handleCommentSubmit(event) {
        const button = event.target;
        const postId = button.getAttribute('data-id');
        const commentInput = document.getElementById(`comment-input-${postId}`);
        const content = commentInput.value;

        fetch(`/posts/${postId}/comments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                commentInput.value = '';
                loadComments(postId);
            } else {
                console.error('Failed to add comment:', data.message);
            }
        })
        .catch(error => {
            console.error('Error adding comment:', error);
        });
    }

    // Load comments for each post after the page loads
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.post').forEach(postElement => {
            const postId = postElement.querySelector('.like-button').getAttribute('data-id');
            loadComments(postId);
        });
    });
</script>

</script>
